pub type float = f32;
pub const PI: float = 3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127372458700660631558817488152092096282925409171536436789259036001133053054882046652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956735188575272489122793818301;
pub const E: float = 2.71828182845904523536028747135266249775724709369995957496696762772407663035354759457138217852516642742746639193200305992181741359662904357290033429526059563073813232862794349076323382988075319525101901157383418793070215408914993488416750924476146066808226480016847741185374234544243710753907774499206955170276183860626133138458300075204493382656029760673711320070932870912744374704723069697720931014169283681902551510865746377211125238978442505695369677078544996996794686445490598793163688923009879312773617821542;
pub type v3 = (float, float, float);
pub type v2 = (float, float);
pub fn mag3 (v: v3) -> float {
    float::sqrt(v.0*v.0 + v.1*v.1 + v.2*v.2)
}
pub fn mag2 (v: v2) -> float {
    float::sqrt(v.0*v.0 + v.1*v.1)
}
pub fn lerp (p0: (float, float), p1: (float, float), x: float) -> float {
    // p0.0 = point 0 x
    // p0.1 = point 0 y
    // p1.0 = point 1 x
    // p1.1 = point 1 y
    return p0.1*((p1.0-x)/(p1.0-p0.0)) + p1.1*((x-p0.0)/(p1.0-p0.0))
}
pub const logo: &str = r"      ___           ___           ___     
     /  /\         /  /\         /  /\    
    /  /::\       /  /::\       /  /::\   
   /  /:/\:\     /  /:/\:\     /  /:/\:\  
  /  /::\ \:\   /  /:/  \:\   /  /::\ \:\ 
 /__/:/\:\_\:\ /__/:/ \__\:| /__/:/\:\ \:\
 \__\/~|::\/:/ \  \:\ /  /:/ \  \:\ \:\_\/
    |  |:|::/   \  \:\  /:/   \  \:\ \:\  
    |  |:|\/     \  \:\/:/     \  \:\_\/  
    |__|:|~       \__\::/       \  \:\    
     \__\|            ~~         \__\/    ";